# coding: utf-8

"""
    Flojoy Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.device_get_device_by_id200_response import DeviceGetDeviceById200Response

class TestDeviceGetDeviceById200Response(unittest.TestCase):
    """DeviceGetDeviceById200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceGetDeviceById200Response:
        """Test DeviceGetDeviceById200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceGetDeviceById200Response`
        """
        model = DeviceGetDeviceById200Response()
        if include_optional:
            return DeviceGetDeviceById200Response(
                id = '',
                name = '',
                project_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                measurements = [
                    openapi_client.models.test_get_test_by_id_200_response_measurements_inner.test_getTestById_200_response_measurements_inner(
                        is_deleted = True, 
                        data = null, 
                        device_id = '', 
                        id = '', 
                        measurement_type = 'boolean', 
                        name = '', 
                        storage_provider = 's3', 
                        test_id = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        test = openapi_client.models.test_get_all_tests_by_project_id_200_response_inner.test_getAllTestsByProjectId_200_response_inner(
                            id = '', 
                            measurement_type = 'boolean', 
                            name = '', 
                            project_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        device = openapi_client.models.test_get_test_by_id_200_response_measurements_inner_device.test_getTestById_200_response_measurements_inner_device(
                            id = '', 
                            name = '', 
                            project_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ]
            )
        else:
            return DeviceGetDeviceById200Response(
                id = '',
                name = '',
                project_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                measurements = [
                    openapi_client.models.test_get_test_by_id_200_response_measurements_inner.test_getTestById_200_response_measurements_inner(
                        is_deleted = True, 
                        data = null, 
                        device_id = '', 
                        id = '', 
                        measurement_type = 'boolean', 
                        name = '', 
                        storage_provider = 's3', 
                        test_id = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        test = openapi_client.models.test_get_all_tests_by_project_id_200_response_inner.test_getAllTestsByProjectId_200_response_inner(
                            id = '', 
                            measurement_type = 'boolean', 
                            name = '', 
                            project_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        device = openapi_client.models.test_get_test_by_id_200_response_measurements_inner_device.test_getTestById_200_response_measurements_inner_device(
                            id = '', 
                            name = '', 
                            project_id = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ],
        )
        """

    def testDeviceGetDeviceById200Response(self):
        """Test DeviceGetDeviceById200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
