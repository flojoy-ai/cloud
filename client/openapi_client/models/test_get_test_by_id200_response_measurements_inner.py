# coding: utf-8

"""
    Flojoy Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.test_get_all_tests_by_project_id200_response_inner import TestGetAllTestsByProjectId200ResponseInner
from openapi_client.models.test_get_test_by_id200_response_measurements_inner_data import TestGetTestById200ResponseMeasurementsInnerData
from openapi_client.models.test_get_test_by_id200_response_measurements_inner_device import TestGetTestById200ResponseMeasurementsInnerDevice
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TestGetTestById200ResponseMeasurementsInner(BaseModel):
    """
    TestGetTestById200ResponseMeasurementsInner
    """ # noqa: E501
    is_deleted: Optional[StrictBool] = Field(alias="isDeleted")
    data: TestGetTestById200ResponseMeasurementsInnerData
    device_id: StrictStr = Field(alias="deviceId")
    id: StrictStr
    measurement_type: StrictStr = Field(alias="measurementType")
    name: Optional[StrictStr]
    storage_provider: StrictStr = Field(alias="storageProvider")
    test_id: StrictStr = Field(alias="testId")
    created_at: datetime = Field(alias="createdAt")
    test: TestGetAllTestsByProjectId200ResponseInner
    device: TestGetTestById200ResponseMeasurementsInnerDevice
    __properties: ClassVar[List[str]] = ["isDeleted", "data", "deviceId", "id", "measurementType", "name", "storageProvider", "testId", "createdAt", "test", "device"]

    @field_validator('measurement_type')
    def measurement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('boolean', 'dataframe'):
            raise ValueError("must be one of enum values ('boolean', 'dataframe')")
        return value

    @field_validator('storage_provider')
    def storage_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('s3', 'local'):
            raise ValueError("must be one of enum values ('s3', 'local')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TestGetTestById200ResponseMeasurementsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test
        if self.test:
            _dict['test'] = self.test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # set to None if is_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.is_deleted is None and "is_deleted" in self.model_fields_set:
            _dict['isDeleted'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TestGetTestById200ResponseMeasurementsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isDeleted": obj.get("isDeleted"),
            "data": TestGetTestById200ResponseMeasurementsInnerData.from_dict(obj.get("data")) if obj.get("data") is not None else None,
            "deviceId": obj.get("deviceId"),
            "id": obj.get("id"),
            "measurementType": obj.get("measurementType"),
            "name": obj.get("name"),
            "storageProvider": obj.get("storageProvider"),
            "testId": obj.get("testId"),
            "createdAt": obj.get("createdAt"),
            "test": TestGetAllTestsByProjectId200ResponseInner.from_dict(obj.get("test")) if obj.get("test") is not None else None,
            "device": TestGetTestById200ResponseMeasurementsInnerDevice.from_dict(obj.get("device")) if obj.get("device") is not None else None
        })
        return _obj


