// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { type UnitId } from './Unit';
import { type TestId } from './Test';
import { type SessionId } from './Session';
import { type ProjectId } from './Project';
import { type default as StorageProvider } from './StorageProvider';
import { type ColumnType, type Selectable, type Insertable, type Updateable } from 'kysely';

export type MeasurementId = string;

/** Represents the table public.measurement */
export default interface MeasurementTable {
  /** Database type: pg_catalog.text */
  id: ColumnType<MeasurementId, MeasurementId, MeasurementId>;

  /** Database type: pg_catalog.text */
  name: ColumnType<string, string, string>;

  /** Database type: pg_catalog.jsonb */
  data: ColumnType<unknown, unknown, unknown>;

  /** Database type: pg_catalog.bool */
  pass: ColumnType<boolean | null, boolean | null, boolean | null>;

  /** Database type: pg_catalog.text */
  unitId: ColumnType<UnitId, UnitId, UnitId>;

  /** Database type: pg_catalog.text */
  testId: ColumnType<TestId, TestId, TestId>;

  /** Database type: pg_catalog.text */
  sessionId: ColumnType<SessionId | null, SessionId | null, SessionId | null>;

  /** Database type: pg_catalog.text */
  sequenceName: ColumnType<string | null, string | null, string | null>;

  /** Database type: pg_catalog.int4 */
  cycleNumber: ColumnType<number | null, number | null, number | null>;

  /** Database type: pg_catalog.text */
  projectId: ColumnType<ProjectId, ProjectId, ProjectId>;

  /** Database type: public.storage_provider */
  storageProvider: ColumnType<StorageProvider, StorageProvider, StorageProvider>;

  /** Database type: pg_catalog.timestamptz */
  createdAt: ColumnType<Date, Date | string | undefined, Date | string>;

  /** Database type: pg_catalog.int4 */
  durationMs: ColumnType<number, number | undefined, number>;

  /** Database type: pg_catalog.bool */
  isDeleted: ColumnType<boolean | null, boolean | null, boolean | null>;
}

export type Measurement = Selectable<MeasurementTable>;

export type NewMeasurement = Insertable<MeasurementTable>;

export type MeasurementUpdate = Updateable<MeasurementTable>;
