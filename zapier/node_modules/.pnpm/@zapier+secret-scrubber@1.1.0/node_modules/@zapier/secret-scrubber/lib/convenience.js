"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractSecretsFromUrl = exports.isSensitiveKey = exports.isUrlWithSecrets = exports.SENSITIVE_SUBSTRINGS = void 0;
const url_1 = require("url");
// a couple of functions that power the public conveience functions, namely findSensitiveValues
// only exported for testing
exports.SENSITIVE_SUBSTRINGS = [
    'api_key',
    'apikey',
    'api-key',
    'auth',
    'jwt',
    'passwd',
    'password',
    'pswd',
    'secret',
    'signature',
    'token',
];
/**
 * Determine if a string:
 * * is a url
 * * has potentially secret information, such as a password or querystring
 */
const isUrlWithSecrets = (val) => {
    // creating a URL object is a little expensive; perform a couple of quick checks first
    if (typeof val !== 'string') {
        return false;
    }
    // if this doesn't start with http(s), it's probably not a url we care about
    if (!val.startsWith('http')) {
        return false;
    }
    let url;
    try {
        url = new url_1.URL(val);
    }
    catch (err) {
        return false;
    }
    return (url.username.length > 0 || url.password.length > 0 || url.search.length > 0);
};
exports.isUrlWithSecrets = isUrlWithSecrets;
const isSensitiveKey = (key) => exports.SENSITIVE_SUBSTRINGS.some((substr) => key.toLowerCase().includes(substr));
exports.isSensitiveKey = isSensitiveKey;
/**
 * Given a string:
 * * if it's a valid url, return a `string[]` of any extracted secrets. Only secret keys will be pulled from the querystring
 * * if it's not a valid url, return `null`
 */
const extractSecretsFromUrl = (maybeUrlStr) => {
    try {
        const subValues = [];
        const url = new url_1.URL(maybeUrlStr);
        if (url.username !== '') {
            subValues.push(decodeURIComponent(url.username));
        }
        if (url.password !== '') {
            subValues.push(decodeURIComponent(url.password));
        }
        url.searchParams.forEach((val, key) => {
            if ((0, exports.isSensitiveKey)(key)) {
                subValues.push(val);
            }
        });
        return subValues;
    }
    catch (e) {
        const err = e;
        if (err.code === 'ERR_INVALID_URL') {
            // not a url, ignore
            return null;
        }
        // otherwise, actual error - throw!
        throw e;
    }
};
exports.extractSecretsFromUrl = extractSecretsFromUrl;
