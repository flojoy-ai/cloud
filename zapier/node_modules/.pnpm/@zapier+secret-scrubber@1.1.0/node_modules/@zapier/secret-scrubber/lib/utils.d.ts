export declare const isLongEnoughToBeSecret: (s: string) => boolean;
export declare const hash: (input: string) => string;
export declare const base64: (val: string) => string | undefined;
export declare const censor: (val: string) => string;
/**
 * returns a mapping of sensitive string -> scrubbed string.
 * it considers transformations of the input, such as percent-encoding
 */
export declare const makeSensitiveBank: (secretValues: Array<string | number>) => {
    [x: string]: string;
};
/**
 * Takes anything as input and returns a **copy** where each item has been run through the `replacer`. Can handle deeply-nested objects.
 *
 * The `replacer` function should always return a value; a good default is returning its sole input.
 */
export declare const recurseReplace: (obj: any, replacer: (val: any) => any) => any;
/**
 * Convenience function for finding potentially sensitive values in objects.
 *
 * It returns stringified versions of any values that were found in the below steps.
 *
 * In the root object, each key/value pair are passed to the `matcher` function. Then:
 * * if the value is an object, the function recurses
 * * if the value is an array, we iterate each element:
 *   * if the element is an object or array, we recurse
 *   * otherwise, we call the matcher with **only** the value (`matcher('', value)`)
 * * otherwise, we pass the key and value to the matcher. If it returns `true`, we collect the value
 */
export declare const recurseExtract: (obj: object | any[], matcher: (key: string, value: any) => boolean) => string[];
/**
 * Custom implementation of String.prototype.replaceAll (not tied to the String namespace though).
 *
 * Key differences between String.prototype.replaceAll and this implementation:
 *   - searchString only supports Strings (not regex)
 *   - replaceValue only supports Strings (not functions)
 *   - replaceValue must not be the empty string
 *
 * Source for inspiration: https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.string.replace-all.js
 */
export declare const replaceAll: (baseString: string, searchString: string, replaceValue: string) => string;
