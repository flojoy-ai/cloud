// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { workspaceId, type WorkspaceId } from './Workspace';
import { modelId, type ModelId } from './Model';
import { type ColumnType, type Selectable, type Insertable, type Updateable } from 'kysely';
import { z } from 'zod';

/** Identifier type for public.project */
export type ProjectId = string & { __brand: 'ProjectId' };

/** Represents the table public.project */
export default interface ProjectTable {
  /** Database type: pg_catalog.text */
  Id: ColumnType<ProjectId, ProjectId, ProjectId>;

  /** Database type: pg_catalog.text */
  Name: ColumnType<string, string, string>;

  /** Database type: pg_catalog.text */
  WorkspaceId: ColumnType<WorkspaceId, WorkspaceId, WorkspaceId>;

  /** Database type: pg_catalog.text */
  ModelId: ColumnType<ModelId, ModelId, ModelId>;

  /** Database type: pg_catalog.timestamptz */
  CreatedAt: ColumnType<Date, Date | string | undefined, Date | string>;

  /** Database type: pg_catalog.timestamptz */
  UpdatedAt: ColumnType<Date, Date | string | undefined, Date | string>;
}

export type Project = Selectable<ProjectTable>;

export type NewProject = Insertable<ProjectTable>;

export type ProjectUpdate = Updateable<ProjectTable>;

export const projectId = z.string();

export const project = z.object({
  Id: projectId,
  Name: z.string(),
  WorkspaceId: workspaceId,
  ModelId: modelId,
  CreatedAt: z.date(),
  UpdatedAt: z.date(),
});

export const projectInitializer = z.object({
  Id: projectId,
  Name: z.string(),
  WorkspaceId: workspaceId,
  ModelId: modelId,
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
});

export const projectMutator = z.object({
  Id: projectId.optional(),
  Name: z.string().optional(),
  WorkspaceId: workspaceId.optional(),
  ModelId: modelId.optional(),
  CreatedAt: z.date().optional(),
  UpdatedAt: z.date().optional(),
});
