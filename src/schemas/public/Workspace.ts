// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { planType, type default as PlanType } from './PlanType';
import { type ColumnType, type Selectable, type Insertable, type Updateable } from 'kysely';
import { z } from 'zod';

/** Identifier type for public.workspace */
export type WorkspaceId = string & { __brand: 'WorkspaceId' };

/** Represents the table public.workspace */
export default interface WorkspaceTable {
  id: ColumnType<WorkspaceId, WorkspaceId, WorkspaceId>;

  name: ColumnType<string, string, string>;

  namespace: ColumnType<string, string, string>;

  plan_type: ColumnType<PlanType, PlanType, PlanType>;

  created_at: ColumnType<Date, Date | string | undefined, Date | string>;

  updated_at: ColumnType<Date, Date | string | undefined, Date | string>;
}

export const workspaceId = z.string() as unknown as z.Schema<WorkspaceId>;

export const workspace = z.object({
  id: workspaceId,
  name: z.string(),
  namespace: z.string(),
  plan_type: planType,
  created_at: z.date(),
  updated_at: z.date(),
}) as unknown as z.Schema<Workspace>;

export const workspaceInitializer = z.object({
  id: workspaceId,
  name: z.string(),
  namespace: z.string(),
  plan_type: planType,
  created_at: z.date().optional(),
  updated_at: z.date().optional(),
}) as unknown as z.Schema<WorkspaceInitializer>;

export const workspaceMutator = z.object({
  id: workspaceId.optional(),
  name: z.string().optional(),
  namespace: z.string().optional(),
  plan_type: planType.optional(),
  created_at: z.date().optional(),
  updated_at: z.date().optional(),
}) as unknown as z.Schema<WorkspaceMutator>;

export type Workspace = Selectable<WorkspaceTable>;

export type NewWorkspace = Insertable<WorkspaceTable>;

export type WorkspaceUpdate = Updateable<WorkspaceTable>;
