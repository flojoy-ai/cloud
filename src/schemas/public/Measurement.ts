// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { hardwareId, type HardwareId } from './Hardware';
import { testId, type TestId } from './Test';
import { storageProvider, type default as StorageProvider } from './StorageProvider';
import { type ColumnType, type Selectable, type Insertable, type Updateable } from 'kysely';
import { z } from 'zod';

/** Identifier type for public.measurement */
export type MeasurementId = string & { __brand: 'MeasurementId' };

/** Represents the table public.measurement */
export default interface MeasurementTable {
  /** Database type: pg_catalog.text */
  Id: ColumnType<MeasurementId, MeasurementId, MeasurementId>;

  /** Database type: pg_catalog.text */
  Name: ColumnType<string, string, string>;

  /** Database type: pg_catalog.jsonb */
  Data: ColumnType<unknown, unknown, unknown>;

  /** Database type: pg_catalog.bool */
  Pass: ColumnType<boolean | null, boolean | null, boolean | null>;

  /** Database type: pg_catalog.text */
  HardwareId: ColumnType<HardwareId, HardwareId, HardwareId>;

  /** Database type: pg_catalog.text */
  TestId: ColumnType<TestId, TestId, TestId>;

  /** Database type: public.storage_provider */
  StorageProvider: ColumnType<StorageProvider, StorageProvider, StorageProvider>;

  /** Database type: pg_catalog.timestamptz */
  CreatedAt: ColumnType<Date, Date | string | undefined, Date | string>;

  /** Database type: pg_catalog.bool */
  IsDeleted: ColumnType<boolean | null, boolean | null, boolean | null>;
}

export type Measurement = Selectable<MeasurementTable>;

export type NewMeasurement = Insertable<MeasurementTable>;

export type MeasurementUpdate = Updateable<MeasurementTable>;

export const measurementId = z.string();

export const measurement = z.object({
  Id: measurementId,
  Name: z.string(),
  Data: z.unknown(),
  Pass: z.boolean().nullable(),
  HardwareId: hardwareId,
  TestId: testId,
  StorageProvider: storageProvider,
  CreatedAt: z.date(),
  IsDeleted: z.boolean().nullable(),
});

export const measurementInitializer = z.object({
  Id: measurementId,
  Name: z.string(),
  Data: z.unknown(),
  Pass: z.boolean().optional().nullable(),
  HardwareId: hardwareId,
  TestId: testId,
  StorageProvider: storageProvider,
  CreatedAt: z.date().optional(),
  IsDeleted: z.boolean().optional().nullable(),
});

export const measurementMutator = z.object({
  Id: measurementId.optional(),
  Name: z.string().optional(),
  Data: z.unknown().optional(),
  Pass: z.boolean().optional().nullable(),
  HardwareId: hardwareId.optional(),
  TestId: testId.optional(),
  StorageProvider: storageProvider.optional(),
  CreatedAt: z.date().optional(),
  IsDeleted: z.boolean().optional().nullable(),
});
