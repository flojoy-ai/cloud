// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { hardwareId, type HardwareId } from './Hardware';
import { testId, type TestId } from './Test';
import { storageProvider, type default as StorageProvider } from './StorageProvider';
import { type ColumnType, type Selectable, type Insertable, type Updateable } from 'kysely';
import { z } from 'zod';

/** Identifier type for public.measurement */
export type MeasurementId = string & { __brand: 'MeasurementId' };

/** Represents the table public.measurement */
export default interface MeasurementTable {
  id: ColumnType<MeasurementId, MeasurementId, MeasurementId>;

  name: ColumnType<string, string, string>;

  data: ColumnType<unknown, unknown, unknown>;

  pass: ColumnType<boolean | null, boolean | null, boolean | null>;

  hardware_id: ColumnType<HardwareId, HardwareId, HardwareId>;

  test_id: ColumnType<TestId, TestId, TestId>;

  storage_provider: ColumnType<StorageProvider, StorageProvider, StorageProvider>;

  created_at: ColumnType<Date, Date | string | undefined, Date | string>;

  is_deleted: ColumnType<boolean | null, boolean | null, boolean | null>;
}

export const measurementId = z.string() as unknown as z.Schema<MeasurementId>;

export const measurement = z.object({
  id: measurementId,
  name: z.string(),
  data: z.unknown(),
  pass: z.boolean().nullable(),
  hardware_id: hardwareId,
  test_id: testId,
  storage_provider: storageProvider,
  created_at: z.date(),
  is_deleted: z.boolean().nullable(),
}) as unknown as z.Schema<Measurement>;

export const measurementInitializer = z.object({
  id: measurementId,
  name: z.string(),
  data: z.unknown(),
  pass: z.boolean().optional().nullable(),
  hardware_id: hardwareId,
  test_id: testId,
  storage_provider: storageProvider,
  created_at: z.date().optional(),
  is_deleted: z.boolean().optional().nullable(),
}) as unknown as z.Schema<MeasurementInitializer>;

export const measurementMutator = z.object({
  id: measurementId.optional(),
  name: z.string().optional(),
  data: z.unknown().optional(),
  pass: z.boolean().optional().nullable(),
  hardware_id: hardwareId.optional(),
  test_id: testId.optional(),
  storage_provider: storageProvider.optional(),
  created_at: z.date().optional(),
  is_deleted: z.boolean().optional().nullable(),
}) as unknown as z.Schema<MeasurementMutator>;

export type Measurement = Selectable<MeasurementTable>;

export type NewMeasurement = Insertable<MeasurementTable>;

export type MeasurementUpdate = Updateable<MeasurementTable>;
