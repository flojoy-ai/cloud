// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { measurementType, type default as MeasurementType } from './MeasurementType';
import { projectId, type ProjectId } from './Project';
import { type ColumnType, type Selectable, type Insertable, type Updateable } from 'kysely';
import { z } from 'zod';

/** Identifier type for public.test */
export type TestId = string & { __brand: 'TestId' };

/** Represents the table public.test */
export default interface TestTable {
  id: ColumnType<TestId, TestId, TestId>;

  measurement_type: ColumnType<MeasurementType, MeasurementType, MeasurementType>;

  name: ColumnType<string, string, string>;

  project_id: ColumnType<ProjectId, ProjectId, ProjectId>;

  created_at: ColumnType<Date, Date | string | undefined, Date | string>;

  updated_at: ColumnType<Date, Date | string | undefined, Date | string>;
}

export const testId = z.string() as unknown as z.Schema<TestId>;

export const test = z.object({
  id: testId,
  measurement_type: measurementType,
  name: z.string(),
  project_id: projectId,
  created_at: z.date(),
  updated_at: z.date(),
}) as unknown as z.Schema<Test>;

export const testInitializer = z.object({
  id: testId,
  measurement_type: measurementType,
  name: z.string(),
  project_id: projectId,
  created_at: z.date().optional(),
  updated_at: z.date().optional(),
}) as unknown as z.Schema<TestInitializer>;

export const testMutator = z.object({
  id: testId.optional(),
  measurement_type: measurementType.optional(),
  name: z.string().optional(),
  project_id: projectId.optional(),
  created_at: z.date().optional(),
  updated_at: z.date().optional(),
}) as unknown as z.Schema<TestMutator>;

export type Test = Selectable<TestTable>;

export type NewTest = Insertable<TestTable>;

export type TestUpdate = Updateable<TestTable>;
